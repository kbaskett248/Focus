# [PackageDev] target_format: plist, ext: tmLanguage
---
name: MagicFS
scopeName: source.fs
fileTypes: [fs]
uuid: 01779121-0e59-4ec5-b2fa-dd10ca5ed9a1

patterns:
- include: '#comment'

- comment: Code Member Keyword
  name: meta.subroutine.fs
  begin: '^ *((:Code)(\.| +)([^\n\t]+?)) *$'
  beginCaptures:
    '1': {name: meta.subroutine.header.fs}
    '2': {name: keyword.other.fs}
    '4': {name: entity.name.subroutine.fs}
  end: (;|(?=:Code))
  patterns:
  - include: '#code-region'


- comment: List Member Keyword
  name: meta.list.fs
  begin: '^ *((:List) +([^\n\t]+?)) *$'
  beginCaptures:
    '1': {name: meta.list.header.fs}
    '2': {name: keyword.other.fs}
    '3': {name: entity.name.list.fs}
  end: (?=^$|^\s*:)
  patterns:
  - include: '#comment'

  - include: '#keyword-string-list'


- comment: Toolset Keyword
  name: meta.toolset.fs
  match: '^ *((:Toolset) +([^\n()\t]+?)) *$'
  captures:
    '1': {name: meta.toolset.header.fs}
    '2': {name: keyword.other.fs}
    '3': {name: entity.name.toolset.fs}


repository:
  code-region:
    patterns:
    - include: '#comment'

    - include: '#illegal-line-start'

    - include: '#illegal-line-end'

    - include: '#string'

    - include: '#string-list'

    - comment: Magic Upper Listset Function
      name: meta.function.listset.upper.fs support.function.fs
      begin: '@[A-Z]\('
      end: '\)\B'
      patterns:
      - include: '#code-region'
    - comment: Magic Lower Listset Function
      name: meta.function.listset.lower.fs support.function.fs
      begin: '@[a-z]\('
      end: '\)\B'
      patterns:
      - include: '#code-region'

    - comment: FS Local Variable
      match: (?<!@|\.)\b([A-Z])\b
      captures:
        '1': {name: meta.variable.other.local.fs constant.numeric}
    - comment: FS Global Variable
      match: (?<!@|\.)\b([a-z])\b
      captures:
        '1': {name: meta.variable.other.global.fs constant.numeric}

    - include: '#control_flow'

    - include: '#illegal-spaces'

    - comment: Magic Upper Listset Function
      name: meta.function.listset.upper.fs support.function.fs
      match: '@[A-Z](\d+)\b'
      captures:
        '1': {name: meta.function.listset.number.upper.fs}
    - comment: Magic Lower Listset Function
      name: meta.function.listset.lower.fs support.function.fs
      match: '@[a-z](\d+)\b'
      captures:
        '1': {name: meta.function.listset.number.lower.fs}
    - comment: Magic Function
      match: '@\p{Alpha}{2}\b'
      name: meta.function.fs support.function.fs
      
    # - name: constant.numeric.integer.decimal.fs
    #   match: \b([1-9]+[0-9]*|0) 
    # - name: constant.numeric.float.fs
    #   match: (?<=[^0-9a-zA-Z_])(?i:(\.\d+(e[\-\+]?\d+)?))

    - include: '#illegal-block-start'

    - comment: Comparison operators
      name: keyword.operator.comparison.fs
      match: '@?~?(\!|\&|\=|\<|\>)'
    - comment: Arithmetic operators
      name: keyword.operator.arithmetic.fs
      match: '@?~?(\+|\-|\/|\*|\\)'
    - comment: Other operators
      name: keyword.operator.other.fs
      match: '@?~?(\#|\$|\%|\:|\|)'
    - comment: Assignment operators
      name: keyword.operator.assignment.fs
      match: \^(?=[\{A-Za-z])
    - comment: Illegal assignment
      name: invalid.illegal.assignment.fs
      match: \^(?=[^\{A-Za-z])

    - include: '#blank-line-error'

    - include: '#errant-bracket'


  comment:
    name: comment.line.double-slash.fs
    begin: (//)
    beginCaptures:
      '1': {name: punctuation.definition.comment.fs}
    end: $\n?
    patterns:
    - match: :Doc\s+(\w+\s?\w*)
      captures:
        '1': {name: comment.line.double-slash.header.fs}
      # - match: '(?i:(in(put)?s?|out(put)?s?|(local )?var(iable)?s?|(side )?effects?|actions?|desc(r(iption)?)?|assumes?|pre|(upper|lower)? ?sets?|bugs?|arg(ument)?s?|val(ues)?|s/e|locals?|returns?|warning|results?)):'
      # - match: '(?i:(IN|OUT|VARS|EFFECT|Input|INPUT|Output|OUTPUT|Actions|Descr|DESCR|Assume|Vars|PRE|DESC|Desc|In|Out|Sets|Bugs|Arg|Val|Var|S/E|LOCALS|RETURN|ASSUMES|WARNING|DESCRIPTION|ARGUMENTS|RESULTS|VARIABLES|UPPERSETS|SETS|locals|arguments|return)):'
    - comment: Purpose
      match: '(?i:((side )?effects?|actions?|desc(r(iption)?)?|assumes?|pre(conditions?)?|s/e|bugs?|warning)):'
      name: comment.line.double-slash.header.fs
    - comment: Arguments
      match: '(?i:(in(put)?s?|arg(ument)?s?|val(ues)?)):'
      name: comment.line.double-slash.header.fs
    - comment: Variables
      match: '(?i:((local )?var(iable)?s?|locals?)):'
      name: comment.line.double-slash.header.fs
    - comment: Sets
      match: '(?i:((upper|lower)?(case)? ?(list)?sets?)):'
      name: comment.line.double-slash.header.fs
    - comment: Returns
      match: '(?i:(out(put)?s?|ret(urn)?s?)):'
      name: comment.line.double-slash.header.fs


  control_flow:
    patterns:
    - comment: "Conditional: IF{},@IF{}"
      name: meta.control.flow.if.fs
      begin: '@?IF({)'
      beginCaptures:
        '1': {name: punctuation.definition.if.begin.fs}
      end: '}'
      endCaptures:
        '0': {name: punctuation.definition.if.end.fs}
      patterns:
      - include: '#illegal-line-start'
      - include: '#conditional-line'
      - include: '#comment'
      - include: '#blank-line-error'

    - comment: "DO Loop: DO{},@DO{}"
      name: meta.control.flow.do.fs
      begin: '@?DO({)'
      beginCaptures:
        '1': {name: punctuation.definition.do.begin.fs}
      end: '}'
      endCaptures:
        '0': {name: punctuation.definition.do.end.fs}
      patterns:
      - include: '#illegal-line-start'
      - include: '#conditional-line'
      - include: '#comment'
      - include: '#blank-line-error'

    - comment: "Apply-To-All: @[]"
      name: meta.control.flow.loop.fs
      begin: '@(\[)'
      beginCaptures:
        '1': {name: punctuation.definition.loop.begin.fs}
      end: '\]'
      endCaptures:
        '0': {name: punctuation.definition.loop.end.fs}
      patterns:
      - include: '#code-region'

    - comment: "Pass-through: []"
      name: meta.control.flow.pass-through.fs
      begin: '\['
      beginCaptures:
        '0': {name: punctuation.definition.pass-through.begin.fs}
      end: '\]'
      endCaptures:
        '0': {name: punctuation.definition.pass-through.end.fs}
      patterns:
      - include: '#code-region'

    - comment: "Concatenation: (),@()"
      name: meta.control.flow.concatenate.fs
      begin: '@?(\()'
      beginCaptures:
        '1': {name: punctuation.definition.concatenate.begin.fs}
      end: '\)'
      endCaptures:
        '0': {name: punctuation.definition.concatenate.end.fs}
      patterns:
      - name: punctuation.definition.separator.comma.fs 
        match: ","
      - include: '#code-region'

    - comment: "Build List: {},@{}"
      name: meta.control.flow.list.fs
      begin: '(@(\{)|(\{)(?=\})|(\{))'
      beginCaptures:
        '2': {name: punctuation.definition.list.begin.fs}
        '3': {name: punctuation.definition.list.begin.fs meta.empty-list.fs}
        '5': {name: punctuation.definition.list.begin.fs}
      end: (((?<=[^@]\{)\})|\})
      endCaptures:
        '1': {name: punctuation.definition.list.end.fs}
        '2': {name: meta.empty-list.fs}
      patterns:
      - name: punctuation.definition.separator.comma.fs
        match: ","
      - include: '#code-region'


  conditional-line:
    comment: "A condition and action within a DO loop or IF statement"
    name: meta.control.flow.check.fs
    begin: (?=[^\s/])
    end: ((;)|(?=}))
    endCaptures:
      '2': {name: punctuation.definition.separator.semicolon.fs}
    patterns:
    # - name: meta.control.flow.check.condition.fs
    #   comment: "The left side of a conditional"
    #   begin: (?<=IF{|  |;)(?=\S)
    #   end: (?<=\S)(?= +\S|\}|;)
    #   patterns:
    #   - include: '#code-region'
    # - name: meta.control.flow.check.action.fs
    #   comment: "The right side of a conditional"
    #   begin: (?<=\S )
    #   end: (?=;|\})
    #   patterns:
    #   - include: '#code-region'
    - comment: Too many spaces in a conditional
      name: invalid.illegal.spaces.fs
      match: (?<=\S)\ {2,}(?=[^\s/])
    - comment: legal space
      match: (?<=\S)\ (?=[^\s/])
    - include: '#code-region'


  string-list:
    comment: String List
    name: meta.string-list.fs
    begin: (`)
    beginCaptures:
      '1': {name: keyword.operator.string-list.fs punctuation.definition.string-list.begin.fs}
    end: '('')'
    endCaptures:
      '1': {name: keyword.operator.string-list.fs punctuation.definition.string-list.end.fs}
    patterns:
    - include: '#string-list'
    - name: keyword.operator.comma.fs punctuation.definition.separator.comma.fs
      match: ","
    - name: string.unquoted.string-list.fs
      match: '[^,''`]' 


  string:
    comment: double quoted string
    name: string.quoted.double.single-line.fs
    begin: (")
    beginCaptures:
      '1': {name: punctuation.definition.string.begin.fs}
    end: ((?<=")(")|")|(\n)
    endCaptures:
      '1': {name: punctuation.definition.string.end.fs}
      '2': {name: meta.nil.fs}
      '3': {name: invalid.illegal.unclosed-string.fs}


  blank-line-error:
    name: invalid.illegal.blank-line.fs
    match: ^ *\n


  illegal-line-start:
    name: invalid.illegal.line-start.fs
    match: ^ *(:|#)(?!Code)


  illegal-line-end:
    name: invalid.illegal.line-end.fs
    match: '@\s*($|(?=//.*$))'


  illegal-spaces:
    comment: Disallowed spacing
    name: invalid.illegal.spaces.fs
    match: (?<=\S)\ +(?!\s|//|$)


  illegal-block-start:
    comment: Starting a new code block before the previous one is finished
    name: invalid.illegal.block-start.fs
    match: ':(Code|List)\s*.*'


  errant-bracket:
    comment: Extraneous brackets
    name: invalid.illegal.bracket.fs
    match: '[})\]].*$\n?'


  keyword-string-list:
    name: meta.keyword-string-list.fs
    comment: List of strings used in :List
    begin: (\{)
    beginCaptures:
      '1': {name: keyword.operator.keyword-string-list.fs punctuation.definition.string-list.begin.fs}
    end: '(\})'
    endCaptures:
      '1': {name: keyword.operator.keyword-string-list.fs punctuation.definition.string-list.end.fs}
    patterns:
    - include: '#keyword-string-list'
    - name: keyword.operator.list-separator.fs punctuation.definition.separator.bar.fs
      match: "|"
    - include: '#blank-line-error'
    - name: string.unquoted.string-list.fs
      match: '[^{}|]'
...